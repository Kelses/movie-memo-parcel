{"mappings":"IG8II,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,Y,I,G,E,E,O,C,gB,I,GF7IG,IAAM,EAAY,CACvB,WAAY,mCACZ,YAAa,+BACb,aAAc,iCAChB,EAOa,EAAgB,UAC3B,GAAI,CAEF,IAAM,EAAM,MAAM,MAAM,EAAU,WAAW,EAG7C,GAAI,CAAC,EAAI,EAAE,CACT,MAAM,AAAI,MAAM,CAAA,EAAG,EAAI,MAAM,CAAC,sBAAsB,CAAC,EAKvD,OADa,MAAM,EAAI,IAAI,EAE7B,CAAE,MAAO,EAAO,CAEd,QAAQ,KAAK,CAAC,EAChB,CACF,C,G,E,Q,S,C,C,C,E,E,E,O,C,e,I,G,E,E,O,C,a,I,GCHO,IAAM,EAAe,AAAC,QAOvB,EALJ,IAAM,EAAiB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,aAAe,EAAE,CAStE,EANkB,EAAe,IAAI,CAAC,AAAC,GAAS,EAAK,EAAE,GAAK,EAAM,EAAE,EAMnD,EAGA,IAAI,EAAgB,EAAM,CAI7C,aAAa,OAAO,CAAC,UAAW,KAAK,SAAS,CAAC,GACjD,EAGa,EAAa,AAAC,IAEzB,IAAM,EAAY,SAAS,aAAa,CAAC,CAAC,YAAY,EAAE,EAAM,EAAE,CAAA,CAAE,EAG9D,GACF,EAAU,MAAM,GAIlB,IAAI,EAAgB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,aAAe,EAAE,CAGrE,EAAgB,EAAc,MAAM,CAClC,AAAC,GAAgB,EAAY,EAAE,GAAK,EAAM,EAAE,EAI9C,aAAa,OAAO,CAAC,UAAW,KAAK,SAAS,CAAC,GACjD,C,G,I,E,E,S,E,E,SC9DA,MAAM,EAAS,SAAS,aAAa,CAAC,eAChC,EAAiB,SA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","sources":["<anon>","src/network.js","src/storage.js","src/main.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7Ugvg\", function(module, exports) {\n\n$parcel$export(module.exports, \"apiConfig\", () => $5c1a908e7826b5c0$export$60b54ddee76676c0);\n$parcel$export(module.exports, \"fetchProducts\", () => $5c1a908e7826b5c0$export$2516233d5dae329e);\n// API configuration object containing the API key, base URL, and image base URL\nconst $5c1a908e7826b5c0$export$60b54ddee76676c0 = {\n    tmdbApiKey: \"87596f432dd011ebe7fdd8cc1764f5d9\",\n    tmdbBaseUrl: \"https://api.themoviedb.org/3\",\n    imageBaseUrl: \"https://image.tmdb.org/t/p/w500\"\n};\nconst $5c1a908e7826b5c0$export$2516233d5dae329e = async ()=>{\n    try {\n        // Fetch data from the TMDB API\n        const res = await fetch($5c1a908e7826b5c0$export$60b54ddee76676c0.tmdbBaseUrl);\n        // Check if the response is not OK (e.g., 404, 500, etc.)\n        if (!res.ok) throw new Error(`${res.status}. Something went wrong`);\n        // Parse the response data as JSON\n        const data = await res.json();\n        return data; // Return the fetched data\n    } catch (error) {\n        // Log any errors that occur during the fetch process\n        console.error(error);\n    }\n};\n\n});\n\nparcelRegister(\"9Z4le\", function(module, exports) {\n\n$parcel$export(module.exports, \"addToJournal\", () => $744d2dad838f829a$export$c737a5e37e27b612);\n$parcel$export(module.exports, \"removeCard\", () => $744d2dad838f829a$export$3301f76e6efaf85e);\n// Function to add a product to the cart\nconst $744d2dad838f829a$export$576b6dd9d68b37bc = (product)=>{\n    // Retrieve the current cart from localStorage or initialize an empty array if it doesn't exist\n    const currCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    // Check if the product is already in the cart\n    const isInCart = currCart.some((item)=>product.id === item.id);\n    let updatedCart;\n    if (isInCart) // If the product is already in the cart, increment its count\n    updatedCart = currCart.map((item)=>item.id === product.id ? {\n            ...item,\n            count: item.count + 1\n        } : item);\n    else {\n        // If the product is not in the cart, add it with a count of 1\n        const newItem = {\n            ...product,\n            count: 1\n        };\n        updatedCart = [\n            ...currCart,\n            newItem\n        ];\n    }\n    // Save the updated cart back to localStorage\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n};\nconst $744d2dad838f829a$export$c737a5e37e27b612 = (movie)=>{\n    // Retrieve the current journal from localStorage or initialize an empty array if it doesn't exist\n    const currentJournal = JSON.parse(localStorage.getItem(\"journal\")) || [];\n    // Check if the movie is already in the journal\n    const isInJournal = currentJournal.some((item)=>item.id === movie.id);\n    let updatedJournal;\n    if (isInJournal) // If the movie is already in the journal, do nothing\n    updatedJournal = currentJournal;\n    else // If the movie is not in the journal, add it\n    updatedJournal = [\n        ...currentJournal,\n        movie\n    ];\n    // Save the updated journal back to localStorage\n    localStorage.setItem(\"journal\", JSON.stringify(updatedJournal));\n};\nconst $744d2dad838f829a$export$3301f76e6efaf85e = (movie)=>{\n    // Find the movie card in the DOM using its unique ID\n    const movieCard = document.querySelector(`#movie-card-${movie.id}`);\n    // If the movie card exists, remove it from the DOM\n    if (movieCard) movieCard.remove();\n    // Retrieve the current journal from localStorage or initialize an empty array if it doesn't exist\n    let journalMovies = JSON.parse(localStorage.getItem(\"journal\")) || [];\n    // Filter out the movie to remove it from the journal array\n    journalMovies = journalMovies.filter((storedMovie)=>storedMovie.id !== movie.id);\n    // Save the updated journal back to localStorage\n    localStorage.setItem(\"journal\", JSON.stringify(journalMovies));\n};\n\n});\n\n// Import necessary functions and configurations\n\nvar $7Ugvg = parcelRequire(\"7Ugvg\");\n\nvar $9Z4le = parcelRequire(\"9Z4le\");\n// DOM elements\nconst $2b6e161c9edcf319$var$search = document.querySelector(\"#search-bar\");\nconst $2b6e161c9edcf319$var$movieContainer = document.getElementById(\"movie-list\");\nconst $2b6e161c9edcf319$var$menu = document.getElementById(\"mobile-menu\");\n// Initialize movie journal and favorites from localStorage or empty arrays\nlet $2b6e161c9edcf319$var$movieJournal = JSON.parse(localStorage.getItem(\"journal\")) || [];\nlet $2b6e161c9edcf319$var$favorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\nlet $2b6e161c9edcf319$var$movies = []; // Initialize an empty array to store fetched movies\n// Toggle mobile menu visibility\ndocument.getElementById(\"menu-toggle\").addEventListener(\"click\", ()=>{\n    $2b6e161c9edcf319$var$menu.classList.toggle(\"hidden\");\n});\n// Check if an element is in the favorites list\nfunction $2b6e161c9edcf319$var$isInTheList(element) {\n    return $2b6e161c9edcf319$var$favorites.some((e)=>e === element);\n}\n// Save favorites to localStorage\nfunction $2b6e161c9edcf319$var$saveFavorites(movieId) {\n    localStorage.setItem(String(movieId), JSON.stringify($2b6e161c9edcf319$var$favorites));\n}\n// Fetch popular movies from the API\nasync function $2b6e161c9edcf319$var$getPopularMovies() {\n    const response = await fetch(`${(0, $7Ugvg.apiConfig).tmdbBaseUrl}/movie/popular?api_key=${(0, $7Ugvg.apiConfig).tmdbApiKey}`);\n    return await response.json();\n}\n// Fetch movies and populate the `movies` array\nasync function $2b6e161c9edcf319$var$fetchMovies() {\n    try {\n        $2b6e161c9edcf319$var$movies = (await $2b6e161c9edcf319$var$getPopularMovies()).results;\n        $2b6e161c9edcf319$var$displayMovies(\"\"); // Display all movies on page load\n    } catch (error) {\n        console.error(\"Error fetching popular movies:\", error);\n    }\n}\n// Display movies based on the input filter\nasync function $2b6e161c9edcf319$var$displayMovies(input) {\n    if (!$2b6e161c9edcf319$var$movieContainer) return;\n    try {\n        if (!input) {\n            // Display all movies if input is empty\n            $2b6e161c9edcf319$var$movieContainer.innerHTML = \"\";\n            $2b6e161c9edcf319$var$movies.forEach((movie)=>{\n                const movieCard = $2b6e161c9edcf319$var$createMovieCard(movie);\n                $2b6e161c9edcf319$var$movieContainer.appendChild(movieCard);\n                const addButton = movieCard.querySelector(`#add-button-${movie.id}`);\n                if ($2b6e161c9edcf319$var$movieJournal === null) return;\n                // Change button color if movie is in the journal\n                addButton.style.backgroundColor = $2b6e161c9edcf319$var$movieJournal.find((fav)=>fav.id === movie.id) ? \"#28A745\" : \"bg-yellow-400\";\n            });\n        } else {\n            // Filter movies based on input\n            const filteredMovies = $2b6e161c9edcf319$var$movies.filter((movie)=>movie.title.toLowerCase().includes(input.toLowerCase()));\n            $2b6e161c9edcf319$var$movieContainer.innerHTML = \"\";\n            if (!filteredMovies.length) $2b6e161c9edcf319$var$movieContainer.innerHTML = `<p class=\"text-white\">No movies found matching \"${input}\"</p>`;\n            else filteredMovies.forEach((movie)=>{\n                const movieCard = $2b6e161c9edcf319$var$createMovieCard(movie);\n                $2b6e161c9edcf319$var$movieContainer.appendChild(movieCard);\n            });\n        }\n    } catch (error) {\n        console.error(\"Error displaying movies:\", error);\n        $2b6e161c9edcf319$var$movieContainer.innerHTML = `<p>Error fetching movies. Please try again later.</p>`;\n    }\n}\n// Create a movie card element\nfunction $2b6e161c9edcf319$var$createMovieCard(movie) {\n    const movieCard = document.createElement(\"div\");\n    movieCard.className = \"bg-white rounded-lg shadow-md overflow-hidden transition-transform transform hover:scale-105\";\n    movieCard.innerHTML = `\n    <img\n      src=\"${(0, $7Ugvg.apiConfig).imageBaseUrl + movie.poster_path}\"\n      alt=\"${movie.title}\"\n      class=\"w-full h-64 object-cover\"\n    />\n    <div class=\"p-6\">\n      <h2 class=\"text-xl font-bold text-gray-800 mb-2\">${movie.title}</h2>\n      <p class=\"text-sm text-gray-600 mb-2\">\n        <span class=\"font-semibold\">Release Date:</span> ${movie.release_date}\n      </p>\n      <p class=\"text-sm text-gray-600 mb-2\">\n        <span class=\"font-semibold\">Language:</span> ${movie.original_language}\n      </p>\n      <p class=\"text-sm text-gray-600 mb-4\">\n        <span class=\"font-semibold\">Rating:</span> ${movie.vote_average}\n      </p>\n      <button id=\"add-button-${movie.id}\"\n        class=\"w-full bg-yellow-400 text-gray-800 font-bold py-2 rounded-lg hover:bg-yellow-500 transition\"\n      >\n        Add to Journal\n      </button>\n    </div>\n  `;\n    // Attach event listener to the button to add movie to journal\n    const addButton = movieCard.querySelector(`#add-button-${movie.id}`);\n    addButton.addEventListener(\"click\", ()=>{\n        (0, $9Z4le.addToJournal)(movie);\n        $2b6e161c9edcf319$var$favorites.push(movie);\n        $2b6e161c9edcf319$var$saveFavorites(movie.id);\n        // Change button color if movie is in the journal\n        const btn = document.getElementById(`add-button-${movie.id}`);\n        if ($2b6e161c9edcf319$var$isInTheList(movie)) btn.style.backgroundColor = \"#28a745\";\n        alert(`Added \"${movie.title}\" to your Journal!`);\n    });\n    return movieCard;\n}\n// Debounce search input to improve performance\nlet $2b6e161c9edcf319$var$debounceTimeout;\n$2b6e161c9edcf319$var$search.addEventListener(\"input\", ()=>{\n    clearTimeout($2b6e161c9edcf319$var$debounceTimeout);\n    $2b6e161c9edcf319$var$debounceTimeout = setTimeout(()=>{\n        const input = $2b6e161c9edcf319$var$search.value.trim();\n        $2b6e161c9edcf319$var$displayMovies(input);\n    }, 300); // 300ms debounce delay\n});\n// Fetch and display movies on page load\n$2b6e161c9edcf319$var$fetchMovies();\n\n\n//# sourceMappingURL=index.bf40ff08.js.map\n","// API configuration object containing the API key, base URL, and image base URL\r\nexport const apiConfig = {\r\n  tmdbApiKey: \"87596f432dd011ebe7fdd8cc1764f5d9\", // API key for accessing TMDB API\r\n  tmdbBaseUrl: \"https://api.themoviedb.org/3\", // Base URL for TMDB API endpoints\r\n  imageBaseUrl: \"https://image.tmdb.org/t/p/w500\", // Base URL for fetching movie images\r\n};\r\n\r\n/**\r\n * Fetches products (movies) from the TMDB API.\r\n * @returns {Promise<Object>} - A promise that resolves to the fetched data.\r\n * @throws {Error} - Throws an error if the response is not OK.\r\n */\r\nexport const fetchProducts = async () => {\r\n  try {\r\n    // Fetch data from the TMDB API\r\n    const res = await fetch(apiConfig.tmdbBaseUrl);\r\n\r\n    // Check if the response is not OK (e.g., 404, 500, etc.)\r\n    if (!res.ok) {\r\n      throw new Error(`${res.status}. Something went wrong`);\r\n    }\r\n\r\n    // Parse the response data as JSON\r\n    const data = await res.json();\r\n    return data; // Return the fetched data\r\n  } catch (error) {\r\n    // Log any errors that occur during the fetch process\r\n    console.error(error);\r\n  }\r\n};\r\n","// Function to add a product to the cart\r\nexport const addToCart = (product) => {\r\n  // Retrieve the current cart from localStorage or initialize an empty array if it doesn't exist\r\n  const currCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n\r\n  // Check if the product is already in the cart\r\n  const isInCart = currCart.some((item) => product.id === item.id);\r\n\r\n  let updatedCart;\r\n\r\n  if (isInCart) {\r\n    // If the product is already in the cart, increment its count\r\n    updatedCart = currCart.map((item) =>\r\n      item.id === product.id ? { ...item, count: item.count + 1 } : item\r\n    );\r\n  } else {\r\n    // If the product is not in the cart, add it with a count of 1\r\n    const newItem = { ...product, count: 1 };\r\n    updatedCart = [...currCart, newItem];\r\n  }\r\n\r\n  // Save the updated cart back to localStorage\r\n  localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n};\r\n\r\n// Function to add a movie to the journal\r\nexport const addToJournal = (movie) => {\r\n  // Retrieve the current journal from localStorage or initialize an empty array if it doesn't exist\r\n  const currentJournal = JSON.parse(localStorage.getItem(\"journal\")) || [];\r\n\r\n  // Check if the movie is already in the journal\r\n  const isInJournal = currentJournal.some((item) => item.id === movie.id);\r\n\r\n  let updatedJournal;\r\n\r\n  if (isInJournal) {\r\n    // If the movie is already in the journal, do nothing\r\n    updatedJournal = currentJournal;\r\n  } else {\r\n    // If the movie is not in the journal, add it\r\n    updatedJournal = [...currentJournal, movie];\r\n  }\r\n\r\n  // Save the updated journal back to localStorage\r\n  localStorage.setItem(\"journal\", JSON.stringify(updatedJournal));\r\n};\r\n\r\n// Function to remove a movie card from the DOM and the journal\r\nexport const removeCard = (movie) => {\r\n  // Find the movie card in the DOM using its unique ID\r\n  const movieCard = document.querySelector(`#movie-card-${movie.id}`);\r\n\r\n  // If the movie card exists, remove it from the DOM\r\n  if (movieCard) {\r\n    movieCard.remove();\r\n  }\r\n\r\n  // Retrieve the current journal from localStorage or initialize an empty array if it doesn't exist\r\n  let journalMovies = JSON.parse(localStorage.getItem(\"journal\")) || [];\r\n\r\n  // Filter out the movie to remove it from the journal array\r\n  journalMovies = journalMovies.filter(\r\n    (storedMovie) => storedMovie.id !== movie.id\r\n  );\r\n\r\n  // Save the updated journal back to localStorage\r\n  localStorage.setItem(\"journal\", JSON.stringify(journalMovies));\r\n};\r\n","// Import necessary functions and configurations\r\nimport { fetchProducts, apiConfig } from \"./network.js\";\r\nimport { addToJournal, addToCart } from \"./storage.js\";\r\n\r\n// DOM elements\r\nconst search = document.querySelector(\"#search-bar\");\r\nconst movieContainer = document.getElementById(\"movie-list\");\r\nconst menu = document.getElementById(\"mobile-menu\");\r\n\r\n// Initialize movie journal and favorites from localStorage or empty arrays\r\nlet movieJournal = JSON.parse(localStorage.getItem(\"journal\")) || [];\r\nlet favorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\r\nlet movies = []; // Initialize an empty array to store fetched movies\r\n\r\n// Toggle mobile menu visibility\r\ndocument.getElementById(\"menu-toggle\").addEventListener(\"click\", () => {\r\n  menu.classList.toggle(\"hidden\");\r\n});\r\n\r\n// Check if an element is in the favorites list\r\nfunction isInTheList(element) {\r\n  return favorites.some((e) => e === element);\r\n}\r\n\r\n// Save favorites to localStorage\r\nfunction saveFavorites(movieId) {\r\n  localStorage.setItem(String(movieId), JSON.stringify(favorites));\r\n}\r\n\r\n// Fetch popular movies from the API\r\nasync function getPopularMovies() {\r\n  const response = await fetch(\r\n    `${apiConfig.tmdbBaseUrl}/movie/popular?api_key=${apiConfig.tmdbApiKey}`\r\n  );\r\n  return await response.json();\r\n}\r\n\r\n// Fetch movies and populate the `movies` array\r\nasync function fetchMovies() {\r\n  try {\r\n    movies = (await getPopularMovies()).results;\r\n    displayMovies(\"\"); // Display all movies on page load\r\n  } catch (error) {\r\n    console.error(\"Error fetching popular movies:\", error);\r\n  }\r\n}\r\n\r\n// Display movies based on the input filter\r\nasync function displayMovies(input) {\r\n  if (!movieContainer) return;\r\n\r\n  try {\r\n    if (!input) {\r\n      // Display all movies if input is empty\r\n      movieContainer.innerHTML = \"\";\r\n      movies.forEach((movie) => {\r\n        const movieCard = createMovieCard(movie);\r\n        movieContainer.appendChild(movieCard);\r\n        const addButton = movieCard.querySelector(`#add-button-${movie.id}`);\r\n        if (movieJournal === null) return;\r\n\r\n        // Change button color if movie is in the journal\r\n        addButton.style.backgroundColor = movieJournal.find(\r\n          (fav) => fav.id === movie.id\r\n        )\r\n          ? \"#28A745\"\r\n          : \"bg-yellow-400\";\r\n      });\r\n    } else {\r\n      // Filter movies based on input\r\n      const filteredMovies = movies.filter((movie) =>\r\n        movie.title.toLowerCase().includes(input.toLowerCase())\r\n      );\r\n\r\n      movieContainer.innerHTML = \"\";\r\n\r\n      if (!filteredMovies.length) {\r\n        movieContainer.innerHTML = `<p class=\"text-white\">No movies found matching \"${input}\"</p>`;\r\n      } else {\r\n        filteredMovies.forEach((movie) => {\r\n          const movieCard = createMovieCard(movie);\r\n          movieContainer.appendChild(movieCard);\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error displaying movies:\", error);\r\n    movieContainer.innerHTML = `<p>Error fetching movies. Please try again later.</p>`;\r\n  }\r\n}\r\n\r\n// Create a movie card element\r\nfunction createMovieCard(movie) {\r\n  const movieCard = document.createElement(\"div\");\r\n  movieCard.className =\r\n    \"bg-white rounded-lg shadow-md overflow-hidden transition-transform transform hover:scale-105\";\r\n\r\n  movieCard.innerHTML = `\r\n    <img\r\n      src=\"${apiConfig.imageBaseUrl + movie.poster_path}\"\r\n      alt=\"${movie.title}\"\r\n      class=\"w-full h-64 object-cover\"\r\n    />\r\n    <div class=\"p-6\">\r\n      <h2 class=\"text-xl font-bold text-gray-800 mb-2\">${movie.title}</h2>\r\n      <p class=\"text-sm text-gray-600 mb-2\">\r\n        <span class=\"font-semibold\">Release Date:</span> ${movie.release_date}\r\n      </p>\r\n      <p class=\"text-sm text-gray-600 mb-2\">\r\n        <span class=\"font-semibold\">Language:</span> ${movie.original_language}\r\n      </p>\r\n      <p class=\"text-sm text-gray-600 mb-4\">\r\n        <span class=\"font-semibold\">Rating:</span> ${movie.vote_average}\r\n      </p>\r\n      <button id=\"add-button-${movie.id}\"\r\n        class=\"w-full bg-yellow-400 text-gray-800 font-bold py-2 rounded-lg hover:bg-yellow-500 transition\"\r\n      >\r\n        Add to Journal\r\n      </button>\r\n    </div>\r\n  `;\r\n\r\n  // Attach event listener to the button to add movie to journal\r\n  const addButton = movieCard.querySelector(`#add-button-${movie.id}`);\r\n  addButton.addEventListener(\"click\", () => {\r\n    addToJournal(movie);\r\n    favorites.push(movie);\r\n    saveFavorites(movie.id);\r\n\r\n    // Change button color if movie is in the journal\r\n    const btn = document.getElementById(`add-button-${movie.id}`);\r\n    if (isInTheList(movie)) {\r\n      btn.style.backgroundColor = \"#28a745\";\r\n    }\r\n\r\n    alert(`Added \"${movie.title}\" to your Journal!`);\r\n  });\r\n\r\n  return movieCard;\r\n}\r\n\r\n// Debounce search input to improve performance\r\nlet debounceTimeout;\r\nsearch.addEventListener(\"input\", () => {\r\n  clearTimeout(debounceTimeout);\r\n  debounceTimeout = setTimeout(() => {\r\n    const input = search.value.trim();\r\n    displayMovies(input);\r\n  }, 300); // 300ms debounce delay\r\n});\r\n\r\n// Fetch and display movies on page load\r\nfetchMovies();\r\n"],"names":["$2b6e161c9edcf319$var$debounceTimeout","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$5c1a908e7826b5c0$export$60b54ddee76676c0","$5c1a908e7826b5c0$export$2516233d5dae329e","tmdbApiKey","tmdbBaseUrl","imageBaseUrl","res","fetch","ok","status","json","error","console","$744d2dad838f829a$export$c737a5e37e27b612","$744d2dad838f829a$export$3301f76e6efaf85e","movie","updatedJournal","currentJournal","JSON","parse","localStorage","getItem","some","item","setItem","stringify","movieCard","document","querySelector","remove","journalMovies","filter","storedMovie","$7Ugvg","$9Z4le","$2b6e161c9edcf319$var$search","$2b6e161c9edcf319$var$movieContainer","getElementById","$2b6e161c9edcf319$var$menu","$2b6e161c9edcf319$var$movieJournal","$2b6e161c9edcf319$var$favorites","$2b6e161c9edcf319$var$movies","$2b6e161c9edcf319$var$getPopularMovies","response","apiConfig","$2b6e161c9edcf319$var$fetchMovies","results","$2b6e161c9edcf319$var$displayMovies","input","filteredMovies","title","toLowerCase","includes","innerHTML","length","forEach","$2b6e161c9edcf319$var$createMovieCard","appendChild","addButton","style","backgroundColor","find","fav","createElement","className","poster_path","release_date","original_language","vote_average","addEventListener","movieId","addToJournal","push","String","btn","alert","classList","toggle","clearTimeout","setTimeout","value","trim"],"version":3,"file":"index.bf40ff08.js.map"}